packages <- c("ape", "bayesplot", "brms", "broom", "dagitty", "devtools", "flextable", "GGally", "ggdag", "ggdark", "ggmcmc", "ggrepel", "ggthemes", "ggtree", "ghibli", "gtools", "invgamma", "loo", "patchwork", "posterior", "psych", "rcartocolor", "Rcpp", "remotes", "rstan", "santoku", "StanHeaders", "statebins", "tidybayes", "tidyverse", "viridis", "viridisLite", "wesanderson")
install.packages(packages, dependencies = T)
devtools::install_github("stan-dev/cmdstanr")
devtools::install_github("EdwinTh/dutchmasters")
devtools::install_github("gadenbuie/ggpomological")
devtools::install_github("GuangchuangYu/ggtree")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("UrbanInstitute/urbnmapr")
sessionInfo()
---
title: "Lecture 02"
---
title: "Lecture 02"
---
title: "Lecture 02"
## Slides
Steps:
## Slides
Steps:
1.  Define generative model of the sample
1.  Define generative model of the sample
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
-   We have 4 variables:
format: html
??make_bar
library(tidyverse)
remove.packages("vctrs"), install.packages("vctrs")
remove.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(tidyverse)
remove.packages("purrr")
install.packages("purrr")
library(tidyverse)
d <-
tibble(p1 = 0,
p2 = rep(1:0, times = c(1, 3)),
p3 = rep(1:0, times = c(2, 2)),
p4 = rep(1:0, times = c(3, 1)),
p5 = 1)
library(tidyverse)
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
d <-
tibble(p1 = 0,
p2 = rep(1:0, times = c(1, 3)),
p3 = rep(1:0, times = c(2, 2)),
p4 = rep(1:0, times = c(3, 1)),
p5 = 1)
head(d)
d %>%
set_names(1:5) %>%
mutate(x = 1:4) %>%
pivot_longer(-x, names_to = "possibility") %>%
mutate(value = value %>% as.character()) %>%
ggplot(aes(x = x, y = possibility, fill = value)) +
geom_point(shape = 21, size = 5) +
scale_fill_manual(values = c("white", "navy")) +
scale_x_discrete(NULL, breaks = NULL) +
theme(legend.position = "none")
library(flextable)
tibble(draw    = 1:3,
marbles = 4) %>%
mutate(possibilities = marbles ^ draw) %>%
flextable()
(
d <-
tibble(position = c((1:4^1) / 4^0,
(1:4^2) / 4^1,
(1:4^3) / 4^2),
draw     = rep(1:3, times = c(4^1, 4^2, 4^3)),
fill     = rep(c("b", "w"), times = c(1, 3)) %>%
rep(., times = c(4^0 + 4^1 + 4^2)))
)
d %>%
ggplot(aes(x = position, y = draw, fill = fill)) +
geom_point(shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
scale_y_continuous(breaks = 1:3) +
theme(legend.position = "none",
panel.grid.minor = element_blank())
(
lines_1 <-
tibble(x    = rep(1:4, each = 4),
xend = ((1:4^2) / 4),
y    = 1,
yend = 2)
)
(
lines_1 <-
tibble(x    = rep(1:4, each = 4),
xend = ((1:4^2) / 4),
y    = 1,
yend = 2)
lines_2 <-
(
lines_1 <-
tibble(x    = rep(1:4, each = 4),
xend = ((1:4^2) / 4),
y    = 1,
yend = 2)
)
(
lines_2 <-
tibble(x    = rep((1:4^2) / 4, each = 4),
xend = (1:4^3) / (4^2),
y    = 2,
yend = 3)
)
d %>%
ggplot(aes(x = position, y = draw)) +
geom_segment(data = lines_1,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_segment(data = lines_2,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_point(aes(fill = fill),
shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
scale_y_continuous(breaks = 1:3) +
theme(legend.position = "none",
panel.grid.minor = element_blank())
library(rethinking)
howell
howell1
read.csv("\data\Howell1.csv")
read.csv("/data/Howell1.csv")
setwd("C:/Users/dmend/OneDrive/Desktop/code/R/stat_rethinking_2023")
read.csv("/data/Howell1.csv")
read.csv("C:/Users/dmend/OneDrive/Desktop/code/R/stat_rethinking_2023/data/Howell1.csv")
read.csv("C:/Users/dmend/OneDrive/Desktop/code/R/stat_rethinking_2023/data/Howell1.csv", sep=";")
tibble(read.csv("C:/Users/dmend/OneDrive/Desktop/code/R/stat_rethinking_2023/data/Howell1.csv", sep=";"))
data <- read.csv("C:/Users/dmend/OneDrive/Desktop/code/R/stat_rethinking_2023/data/Howell1.csv",
sep=";")
data <- data %>%
tibble %>%
filter(age>13)
data <- read.csv("C:/Users/dmend/OneDrive/Desktop/code/R/stat_rethinking_2023/data/Howell1.csv",
sep=";")
data_ex <- data %>%
tibble %>%
filter(age<13)
sim_H_W <- function(A,bAH = 0.5, bHW = 0.5, bAW = 0.1){
N <- length(A)
H <- rnorm(N,bAH*A,2)
W <- rnorm(N,bAW*A + bAH*H + bHW,2)
data.frame(A, H, W)
}
sim_H_W()
sim_H_W(A=1:13)
lm(age ~ weight, data = data_ex)
lm(weight ~ age, data = data_ex)
data("Howell1")
data(Howell1)
d <- Howell1 %>%
tibble %>%
filter(age<13)
plot(d$age, d$weight)
# part 1
sim_H_W <- function(A,bAH = 0.5, bHW = 0.5, bAW = 0.1){
N <- length(A)
H <- rnorm(N,bAH*A,2)
W <- rnorm(N,bAW*A + bAH*H + bHW,2)
data.frame(A, H, W)
}
sim_H_W(A=1:13)
# part 2
n <- 10
a <- rnorm(n,5,1)
b <- runif(n,0,10)
?runif
plot( NULL , xlim=range(d$age) , ylim=range(d$weight) ,
xlab="age" , ylab="weight" )
for ( i in 1:n ) abline( a[i] , b[i] , lwd=3 , col=2 )
?quap
?alist
alist(
W ~ dnorm( mu , sigma ),
mu <- a + b*A,
a ~ dnorm(5,1),
b ~ dunif(0,10),
sigma ~ dexp(1)
)
# This creates a simple linear regression model.
m2 <- quap(
alist(
W ~ dnorm( mu , sigma ),
mu <- a + b*A,
a ~ dnorm(5,1),
b ~ dunif(0,10),
sigma ~ dexp(1)
), data=list(W=d$weight,A=d$age) )
precis(m2)
library(flextable)
tibble(draw    = 1:3,
marbles = 4) %>%
mutate(possibilities = marbles ^ draw) %>%
flextable()
(
d <-
tibble(position = c((1:4^1) / 4^0,
(1:4^2) / 4^1,
(1:4^3) / 4^2),
draw     = rep(1:3, times = c(4^1, 4^2, 4^3)),
fill     = rep(c("b", "w"), times = c(1, 3)) %>%
rep(., times = c(4^0 + 4^1 + 4^2)))
)
d %>%
ggplot(aes(x = position, y = draw, fill = fill)) +
geom_point(shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
scale_y_continuous(breaks = 1:3) +
theme(legend.position = "none",
panel.grid.minor = element_blank())
# these will connect the dots from the first and second draws
(
lines_1 <-
tibble(x    = rep(1:4, each = 4),
xend = ((1:4^2) / 4),
y    = 1,
yend = 2)
)
# these will connect the dots from the second and third draws
(
lines_2 <-
tibble(x    = rep((1:4^2) / 4, each = 4),
xend = (1:4^3) / (4^2),
y    = 2,
yend = 3)
)
d %>%
ggplot(aes(x = position, y = draw)) +
geom_segment(data = lines_1,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_segment(data = lines_2,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_point(aes(fill = fill),
shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
scale_y_continuous(breaks = 1:3) +
theme(legend.position = "none",
panel.grid.minor = element_blank())
d <-
d %>%
mutate(denominator = ifelse(draw == 1, .5,
ifelse(draw == 2, .5 / 4,
.5 / 4^2))) %>%
mutate(position = position - denominator)
# these will connect the dots from the first and second draws
(
lines_1 <-
tibble(x    = rep(1:4, each = 4),
xend = ((1:4^2) / 4),
y    = 1,
yend = 2) %>%
mutate(x    = x - 0.5,
xend = xend - 0.5 / 4^1)
)
# these will connect the dots from the second and third draws
(
lines_2 <-
tibble(x    = rep((1:4^2) / 4, each = 4),
xend = (1:4^3) / (4^2),
y    = 2,
yend = 3) %>%
mutate(x    = x - 0.5 / 4^1,
xend = xend - 0.5 / 4^2)
)
d %>%
mutate(denominator = ifelse(draw == 1, .5,
ifelse(draw == 2, .5 / 4,
.5 / 4^2))) %>%
mutate(position = position - denominator)
d %>%
mutate(denominator = ifelse(draw == 1, .5,
ifelse(draw == 2, .5 / 4,
.5 / 4^2))) %>%
mutate(position = position - denominator) %>%
ggplot(aes(x = position, y = draw, fill = fill)) +
geom_point(shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
scale_y_continuous(breaks = 1:3) +
theme(legend.position = "none",
panel.grid.minor = element_blank())
# these will connect the dots from the first and second draws
(
lines_1 <-
tibble(x    = rep(1:4, each = 4),
xend = ((1:4^2) / 4),
y    = 1,
yend = 2) %>%
mutate(x    = x - 0.5,
xend = xend - 0.5 / 4^1)
)
# these will connect the dots from the second and third draws
(
lines_2 <-
tibble(x    = rep((1:4^2) / 4, each = 4),
xend = (1:4^3) / (4^2),
y    = 2,
yend = 3) %>%
mutate(x    = x - 0.5 / 4^1,
xend = xend - 0.5 / 4^2)
)
d %>%
ggplot(aes(x = position, y = draw)) +
geom_segment(data = lines_1,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_segment(data = lines_2,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_point(aes(fill = fill),
shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
scale_y_continuous(breaks = 1:3) +
theme(legend.position = "none",
panel.grid.minor = element_blank())
d %>%
ggplot(aes(x = position, y = draw)) +
geom_segment(data = lines_1,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_segment(data = lines_2,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_point(aes(fill = fill),
shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
coord_polar() +
scale_y_continuous(breaks = 1:3) +
theme(legend.position = "none",
panel.grid.minor = element_blank())
d %>%
ggplot(aes(x = position, y = draw)) +
geom_segment(data = lines_1,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_segment(data = lines_2,
aes(x = x, xend = xend,
y = y, yend = yend),
linewidth = 1/3) +
geom_point(aes(fill = fill),
shape = 21, size = 3) +
scale_fill_manual(values  = c("navy", "white")) +
coord_polar() +
scale_y_continuous(breaks = 1:3) +
theme_bw()+
theme(legend.position = "none",
panel.grid.minor = element_blank())
# building a model
(d <- tibble(toss = c("w", "l", "w", "w", "w", "l", "w", "l", "w")))
(
d <-
d %>%
mutate(n_trials  = 1:9,
n_success = cumsum(toss == "w"))
)
(
d <-
tibble(toss = c("w", "l", "w", "w", "w", "l", "w", "l", "w")) %>%
mutate(n_trials  = 1:9,
n_success = cumsum(toss == "w"))
)
dbinom(x = 6, size = 9, prob = .5)
tibble(prob = seq(from = 0, to = 1, by = .01)) %>%
ggplot(aes(x = prob, y = dbinom(x = 6, size = 9, prob = prob))) +
geom_line() +
labs(x = "probability",
y = "binomial likelihood") +
theme(panel.grid = element_blank())
sequence_length <- 1e3
d <-
tibble(probability = seq(from = 0, to = 1, length.out = sequence_length)) %>%
expand_grid(row = c("flat", "stepped", "Laplace"))  %>%
arrange(row, probability) %>%
mutate(prior = ifelse(row == "flat", 1,
ifelse(row == "stepped", rep(0:1, each = sequence_length / 2),
exp(-abs(probability - 0.5) / .25) / ( 2 * 0.25))),
likelihood = dbinom(x = 6, size = 9, prob = probability)) %>%
group_by(row) %>%
mutate(posterior = prior * likelihood / sum(prior * likelihood)) %>%
pivot_longer(prior:posterior)  %>%
ungroup() %>%
mutate(name = factor(name, levels = c("prior", "likelihood", "posterior")),
row  = factor(row, levels = c("flat", "stepped", "Laplace")))
d
globe_qa <- quap(
alist(
W ~ dbinom(W + L, p), #binomial likelihood
p ~ dunif(0, 1)       # uniform prior
),
data = list(W = 6, L = 3)
)
precis(globe_qa)
globe_qa <- quap(
alist(
W ~ dbinom(W + L, p), #binomial likelihood
p ~ dunif(0, 1)       # uniform prior
),
data = list(W = 69, L = 3)
)
precis(globe_qa)
globe_qa <- quap(
alist(
W ~ dbinom(W + L, p), #binomial likelihood
p ~ dunif(0, 1)       # uniform prior
),
data = list(W = 0, L = 1)
)
globe_qa <- quap(
alist(
W ~ dbinom(W + L, p), #binomial likelihood
p ~ dunif(0, 1)       # uniform prior
),
data = list(W = 1, L = 1)
)
precis(globe_qa)
globe_qa_18 <- quap(
alist(
W ~ dbinom(9*2, p), #binomial likelihood
p ~ dunif(0, 1)       # uniform prior
),
data = list(w = 6 * 2)
)
globe_qa_18 <- quap(
alist(
w ~ dbinom(9*2, p), #binomial likelihood
p ~ dunif(0, 1)       # uniform prior
),
data = list(w = 6 * 2)
)
globe_qa_36 <- quap(
alist(
w ~ dbinom(9*4, p), #binomial likelihood
p ~ dunif(0, 1)       # uniform prior
),
data = list(w = 6 * 4)
)
n_grid <- 100
# wrangle
tibble(w = c(6, 12, 24),
n = c(9, 18, 36),
s = c(.16, .11, .08)) %>%
expand_grid(p_grid = seq(from = 0, to = 1, length.out = n_grid)) %>%
mutate(prior = 1,
m     = .67)  %>%
mutate(likelihood = dbinom(w, size = n, prob = p_grid)) %>%
mutate(unstd_grid_posterior = likelihood * prior,
unstd_quad_posterior = dnorm(p_grid, m, s)) %>%
group_by(w) %>%
mutate(grid_posterior = unstd_grid_posterior / sum(unstd_grid_posterior),
quad_posterior = unstd_quad_posterior / sum(unstd_quad_posterior),
n              = str_c("n = ", n)) %>%
mutate(n = factor(n, levels = c("n = 9", "n = 18", "n = 36"))) %>%
# plot
ggplot(aes(x = p_grid)) +
geom_line(aes(y = grid_posterior)) +
geom_line(aes(y = quad_posterior),
color = "grey50") +
labs(x = "proportion water",
y = "density") +
theme(panel.grid = element_blank()) +
facet_wrap(~ n, scales = "free")
library(rethinking)
data("Howell1")
